{"ast":null,"code":"var _jsxFileName = \"/Users/marinagantyuk/Desktop/react-card-effects-solution/cards/src/Deck.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport \"./Deck.css\";\nimport ShuffleBtn from \"./ShuffleBtn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck\";\n/** Deck: uses deck API, allows drawing card at a time. */\n\nfunction Deck() {\n  _s();\n  const [deck, setDeck] = useState(null);\n  const [drawn, setDrawn] = useState([]);\n  const [isShuffling, setIsShuffling] = useState(false);\n  useEffect(async () => {\n    const d = await axios.get(\"\".concat(API_BASE_URL, \"/new/shuffle/\"));\n    setDeck(d.data);\n  }, []);\n\n  /** Draw card: change the state & effect will kick in. */\n  async function draw() {\n    try {\n      const drawRes = await axios.get(\"\".concat(API_BASE_URL, \"/\").concat(deck.deck_id, \"/draw/\"));\n      if (drawRes.data.remaining === 0) throw new Error(\"Deck empty!\");\n      const card = drawRes.data.cards[0];\n      setDrawn(d => [...d, {\n        id: card.code,\n        name: card.suit + \" \" + card.value,\n        image: card.image\n      }]);\n    } catch (err) {\n      alert(err);\n    }\n  }\n\n  /** Shuffle: change the state & effect will kick in. */\n  async function startShuffling() {\n    setIsShuffling(true);\n    try {\n      await axios.get(\"\".concat(API_BASE_URL, \"/\").concat(deck.deck_id, \"/shuffle/\"));\n      setDrawn([]);\n    } catch (err) {\n      alert(err);\n    } finally {\n      setIsShuffling(false);\n    }\n  }\n\n  /** Return draw button (disabled if shuffling) */\n  function renderDrawBtnIfOk() {\n    if (!deck) return null;\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Deck-gimme\",\n      onClick: draw,\n      disabled: isShuffling,\n      children: \"DRAW\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"Deck\",\n    children: [renderDrawBtnIfOk(), /*#__PURE__*/_jsxDEV(ShuffleBtn, {\n      isShuffling: isShuffling,\n      startShuffling: startShuffling\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Deck-cardarea\",\n      children: drawn.map(c => /*#__PURE__*/_jsxDEV(Card, {\n        name: c.name,\n        image: c.image\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(Deck, \"rJFNjGw4xcuVBrPVYhrDVDJI900=\");\n_c = Deck;\nexport default Deck;\nvar _c;\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"names":["React","useEffect","useState","Card","axios","ShuffleBtn","jsxDEV","_jsxDEV","API_BASE_URL","Deck","_s","deck","setDeck","drawn","setDrawn","isShuffling","setIsShuffling","d","get","concat","data","draw","drawRes","deck_id","remaining","Error","card","cards","id","code","name","suit","value","image","err","alert","startShuffling","renderDrawBtnIfOk","className","onClick","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","map","c","_c","$RefreshReg$"],"sources":["/Users/marinagantyuk/Desktop/react-card-effects-solution/cards/src/Deck.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport \"./Deck.css\";\nimport ShuffleBtn from \"./ShuffleBtn\";\n\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck\";\n/** Deck: uses deck API, allows drawing card at a time. */\n\nfunction Deck() {\n  const [deck, setDeck] = useState(null);\n  const [drawn, setDrawn] = useState([]);\n  const [isShuffling, setIsShuffling] = useState(false);\n\n  useEffect(async () => {\n    const d = await axios.get(`${API_BASE_URL}/new/shuffle/`);\n    setDeck(d.data);\n  }, []);\n\n  /** Draw card: change the state & effect will kick in. */\n  async function draw() {\n    try {\n      const drawRes = await axios.get(`${API_BASE_URL}/${deck.deck_id}/draw/`);\n\n      if (drawRes.data.remaining === 0) throw new Error(\"Deck empty!\");\n\n      const card = drawRes.data.cards[0];\n\n      setDrawn((d) => [\n        ...d,\n        {\n          id: card.code,\n          name: card.suit + \" \" + card.value,\n          image: card.image,\n        },\n      ]);\n    } catch (err) {\n      alert(err);\n    }\n  }\n\n  /** Shuffle: change the state & effect will kick in. */\n  async function startShuffling() {\n    setIsShuffling(true);\n    try {\n      await axios.get(`${API_BASE_URL}/${deck.deck_id}/shuffle/`);\n      setDrawn([]);\n    } catch (err) {\n      alert(err);\n    } finally {\n      setIsShuffling(false);\n    }\n  }\n\n  /** Return draw button (disabled if shuffling) */\n  function renderDrawBtnIfOk() {\n    if (!deck) return null;\n\n    return (\n      <button className=\"Deck-gimme\" onClick={draw} disabled={isShuffling}>\n        DRAW\n      </button>\n    );\n  }\n\n  return (\n    <main className=\"Deck\">\n      {renderDrawBtnIfOk()}\n      <ShuffleBtn isShuffling={isShuffling} startShuffling={startShuffling} />\n\n      <div className=\"Deck-cardarea\">\n        {drawn.map((c) => (\n          <Card key={c.id} name={c.name} image={c.image} />\n        ))}\n      </div>\n    </main>\n  );\n}\n\nexport default Deck;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}