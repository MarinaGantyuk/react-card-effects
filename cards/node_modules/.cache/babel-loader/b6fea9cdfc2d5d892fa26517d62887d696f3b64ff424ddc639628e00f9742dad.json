{"ast":null,"code":"var _jsxFileName = \"/Users/marinagantyuk/Desktop/react-card-effects-solution/cards/src/Deck.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport \"./Deck.css\";\nimport ShuffleBtn from \"./ShuffleBtn\";\nimport DrawBtn from \"./DrawBtn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck\";\n/** Deck: uses deck API, allows drawing card at a time. */\n\nfunction Deck() {\n  _s();\n  const [deck, setDeck] = useState(null);\n  const [drawn, setDrawn] = useState([]);\n  const [isShuffling, setIsShuffling] = useState(false);\n  useEffect(async () => {\n    const d = await axios.get(\"\".concat(API_BASE_URL, \"/new/shuffle/\"));\n    setDeck(d.data);\n    return () => {\n      setDeck(null);\n    };\n  }, []);\n\n  /** Draw card: change the state & effect will kick in. */\n  async function draw() {\n    try {\n      const drawRes = await axios.get(\"\".concat(API_BASE_URL, \"/\").concat(deck.deck_id, \"/draw/\"));\n      if (drawRes.data.remaining === 0) throw new Error(\"Deck empty!\");\n      const card = drawRes.data.cards[0];\n      setDrawn(d => [...d, {\n        id: card.code,\n        name: card.suit + \" \" + card.value,\n        image: card.image\n      }]);\n    } catch (err) {\n      alert(err);\n    }\n  }\n\n  /** Shuffle: change the state & effect will kick in. */\n  async function startShuffling() {\n    setIsShuffling(true);\n    try {\n      await axios.get(\"\".concat(API_BASE_URL, \"/\").concat(deck.deck_id, \"/shuffle/\"));\n      setDrawn([]);\n    } catch (err) {\n      alert(err);\n    } finally {\n      setIsShuffling(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"Deck\",\n    children: [/*#__PURE__*/_jsxDEV(DrawBtn, {\n      isShuffling: isShuffling,\n      draw: draw,\n      deck: deck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ShuffleBtn, {\n      isShuffling: isShuffling,\n      startShuffling: startShuffling,\n      deck: deck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Deck-cardarea\",\n      children: drawn.map(c => /*#__PURE__*/_jsxDEV(Card, {\n        name: c.name,\n        image: c.image\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(Deck, \"rJFNjGw4xcuVBrPVYhrDVDJI900=\");\n_c = Deck;\nexport default Deck;\nvar _c;\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"names":["React","useEffect","useState","Card","axios","ShuffleBtn","DrawBtn","jsxDEV","_jsxDEV","API_BASE_URL","Deck","_s","deck","setDeck","drawn","setDrawn","isShuffling","setIsShuffling","d","get","concat","data","draw","drawRes","deck_id","remaining","Error","card","cards","id","code","name","suit","value","image","err","alert","startShuffling","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","c","_c","$RefreshReg$"],"sources":["/Users/marinagantyuk/Desktop/react-card-effects-solution/cards/src/Deck.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport \"./Deck.css\";\nimport ShuffleBtn from \"./ShuffleBtn\";\nimport DrawBtn from \"./DrawBtn\";\n\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck\";\n/** Deck: uses deck API, allows drawing card at a time. */\n\nfunction Deck() {\n  const [deck, setDeck] = useState(null);\n  const [drawn, setDrawn] = useState([]);\n  const [isShuffling, setIsShuffling] = useState(false);\n\n  useEffect(async () => {\n    const d = await axios.get(`${API_BASE_URL}/new/shuffle/`);\n    setDeck(d.data);\n    return () => {\n      setDeck(null);\n    };\n  }, []);\n\n  /** Draw card: change the state & effect will kick in. */\n  async function draw() {\n    try {\n      const drawRes = await axios.get(`${API_BASE_URL}/${deck.deck_id}/draw/`);\n\n      if (drawRes.data.remaining === 0) throw new Error(\"Deck empty!\");\n\n      const card = drawRes.data.cards[0];\n\n      setDrawn((d) => [\n        ...d,\n        {\n          id: card.code,\n          name: card.suit + \" \" + card.value,\n          image: card.image,\n        },\n      ]);\n    } catch (err) {\n      alert(err);\n    }\n  }\n\n  /** Shuffle: change the state & effect will kick in. */\n  async function startShuffling() {\n    setIsShuffling(true);\n    try {\n      await axios.get(`${API_BASE_URL}/${deck.deck_id}/shuffle/`);\n      setDrawn([]);\n    } catch (err) {\n      alert(err);\n    } finally {\n      setIsShuffling(false);\n    }\n  }\n\n  return (\n    <main className=\"Deck\">\n      <DrawBtn isShuffling={isShuffling} draw={draw} deck={deck} />\n      <ShuffleBtn\n        isShuffling={isShuffling}\n        startShuffling={startShuffling}\n        deck={deck}\n      />\n\n      <div className=\"Deck-cardarea\">\n        {drawn.map((c) => (\n          <Card key={c.id} name={c.name} image={c.image} />\n        ))}\n      </div>\n    </main>\n  );\n}\n\nexport default Deck;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}